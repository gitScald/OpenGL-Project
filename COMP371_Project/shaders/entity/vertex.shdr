#version 330 core

in vec3 i_position;
in vec3 i_normal;
in vec2 i_texture;

out vec3 o_fragPosition;
out vec3 o_fragNormal;
out vec2 o_textureCoordinate;

uniform mat4 u_modelMat;
uniform mat4 u_viewMat;
uniform mat4 u_projectionMat;

void main() {
    // fragment position in world space
    o_fragPosition = vec3(u_modelMat * vec4(i_position, 1.0f));

    // fragment normal with scaling effects discarded
    o_fragNormal = transpose(inverse(mat3(u_modelMat))) * i_normal;

    // fragment texture coordinates
    o_textureCoordinate = i_texture;

    gl_Position = u_projectionMat * u_viewMat * u_modelMat * vec4(i_position, 1.0f);
}