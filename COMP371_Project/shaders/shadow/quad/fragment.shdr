#version 330 core

out vec4 o_fragColor;

in vec2 o_textureCoordinate;

struct Light {
    vec2 planeNearFar;
};

uniform samplerCube u_depthTexture;
uniform Light u_light;

float linearizedDepth() {
    // normalize to NDC
    vec2 textureCoord = 2.0f * o_textureCoordinate - 1.0f;

    // sample depth texture
    float depth = texture(u_depthTexture, vec3(textureCoord.x, -1.0f, textureCoord.y)).r;

    // linearize depth
    return (2.0f * u_light.planeNearFar.x)
        / (u_light.planeNearFar.y + u_light.planeNearFar.x
            - depth * (u_light.planeNearFar.y - u_light.planeNearFar.x));
}

void main() {
    // linearized depth value sampled from depth texture
    float fragDepth = linearizedDepth();

    o_fragColor = vec4(vec3(fragDepth), 1.0f);
}