#version 330 core

out vec4 o_fragColor;

in vec4 o_fragViewPosition;
in vec3 o_fragPosition;
in vec3 o_fragNormal;
in vec2 o_textureCoordinate;

struct Fog {
    vec4 color;
    
    float density;
};

struct Light {
    vec4 color;
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec2 planeNearFar;

    float kc;
    float kl;
    float kq;
};

struct Material {
    sampler2D diffuse;
    sampler2D specular;

    float shininess;
};

struct RimLighting {
    vec4 color;

    float min;
    float max;
};

uniform bool u_fogEnabled;
uniform bool u_texturesEnabled;
uniform vec3 u_cameraPosition;
uniform vec4 u_color;
uniform Fog u_fog;
uniform Light u_light;
uniform Material u_material;
uniform RimLighting u_rim;

bool colorIsAlpha(vec4 color) {
    // alpha blending
    return color.a < 0.1f;
}

float texturesEnabled() {
    // check if textures are enabled or not
    return float(u_texturesEnabled);
}

vec3 objectColorDiffuse() {
    // object color to use
    vec3 color = texturesEnabled()
        * texture(u_material.diffuse, o_textureCoordinate).rgb
        + (1.0f - texturesEnabled())
        * u_color.rgb;

    return color;
}

vec3 objectColorSpecular() {
    // object color to use
    vec3 color = texturesEnabled()
        * texture(u_material.specular, o_textureCoordinate).rgb
        + (1.0f - texturesEnabled())
        * u_color.rgb;

    return color;
}

vec3 lightingAmbient() {
    // ambient lighting
    vec3 ambient = u_light.color.rgb
        * u_light.ambient
        * objectColorDiffuse();

    return ambient;
}

vec3 lightingDiffuse() {
    // diffuse lighting
    vec3 fragNormal = normalize(o_fragNormal);
    vec3 lightDirection = normalize(u_light.position - o_fragPosition);

    float diffusion = max(dot(fragNormal, lightDirection), 0.0f);
    vec3 diffuse = u_light.color.rgb
        * u_light.diffuse
        * diffusion
        * objectColorDiffuse();

    return diffuse;
}

vec3 lightingSpecular() {
    // specular lighting
    vec3 fragNormal = normalize(o_fragNormal);
    vec3 lightDirection = normalize(u_light.position - o_fragPosition);
    vec3 cameraDirection = normalize(u_cameraPosition - o_fragPosition);
    vec3 reflectionDirection = reflect(-lightDirection, fragNormal);

    float specularity = pow(max(dot(cameraDirection, reflectionDirection), 0.0f), u_material.shininess);
    vec3 specular = u_light.color.rgb
        * u_light.specular
        * specularity
        * objectColorSpecular();

    return specular;
}

vec3 lightingRim() {
    // rim lighting
    vec3 fragNormal = normalize(o_fragNormal);
    vec3 cameraDirection = normalize(u_cameraPosition - o_fragPosition);

    float rimming = 1 - max(dot(cameraDirection, fragNormal), 0.0f);
    rimming = smoothstep(u_rim.min, u_rim.max, rimming);
    vec3 rim = u_light.color.rgb
        * u_rim.color.rgb
        * rimming
        * objectColorDiffuse();

    return rim;
}

float attenuationFactor() {
    // light attenuation over distance
    float distance = length(u_light.position - o_fragPosition);
    float attenuation = 1.0f / (u_light.kc + u_light.kl * distance + u_light.kq * distance * distance);

    return attenuation;
}

float fogEnabled() {
    // check whether fog is enabled or not
    return float(u_fogEnabled);
}

float fogFactor() {
    // fog calculations
    float distanceToCamera = length(o_fragViewPosition);
    float fog = 1.0f /
        exp((distanceToCamera * u_fog.density)
            * (distanceToCamera * u_fog.density));
    fog = clamp(fog, 0.0f, 1.0f);

    return fog;
}

void main() {
    // discard fragment if in alpha channel
    vec4 textureColor = texture(u_material.diffuse, o_textureCoordinate);
    if (textureColor.a < 0.3f)
        discard;

    // calculate combined lighting
    vec3 fragColor = //lightingAmbient()
        //+ lightingDiffuse()
        //+ lightingSpecular()
        textureColor.rgb;
        //+ lightingRim();

    //fragColor *= attenuationFactor();

    fragColor = fogEnabled() * mix(u_fog.color.rgb, fragColor, fogFactor())
        + (1.0f - fogEnabled()) * fragColor * lightingRim();
    
    o_fragColor = vec4(fragColor, 1.0f);
}